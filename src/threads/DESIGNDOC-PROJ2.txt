		     +--------------------------+
         | CS 140	                  |
		     | PROJECT 2: USER PROGRAMS	|
		     | DESIGN DOCUMENT        	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yuchen Zhang < zhang232@buffalo.edu >
Nannan Zhai < nannanzh@buffalo.edu >
Liyuan Liu < lliu49@buffalo.edu >

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Using strtok_r() recursively to get the aruguments, then put them into a stack.
We scan it from the back, so the order is right.
By checking the size every time.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok() is not thread safe with implemented by static buffer, while the strtok_r()'s argument is a pointer.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1. Reducing time-cost, and workload of kernel.
2. Improve safety of the kernel. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct child_status 
{
  tid_t child_id;
  bool is_exit_called;
  bool has_been_waited;
  int child_exit_status;
  struct list_elem elem_child_status;
};
struct thread
{
  ...
  #ifdef USERPROG
    tid_t parent_id;                    
    int child_load_status;
    struct lock lock_child;
    struct condition cond_child;
    struct list children;
    struct file *exec_file;
  #endif
  ...
}

/* In syscall.c */
struct file_descriptor
{
  int fd_num;
  tid_t owner;
  struct file *file_struct;
  struct list_elem elem;
};

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each fd linked with a file opened. And we save the fds as a list.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
READ:
Check if valid.
Acquire lock
If STDOUT_FILENO, release the lock and return -1
Else if STDIN_FILENO, retrieve the key and then release and return 0
Otherwise, find the file and read it
WRITE:
Check if valid.
Acquire lock
Similar to the read part. According to different situations, do different lock operation or open and write the file.
>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
Least is 1, if pagedir_get_page() get a page head back
Greatest is 4096, if it is not continuous. If continuous, it is 2.

The least number is still 1. The greatest is 2.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
process_wait()
Traverse the list "children", using semaphore to indicate the running status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Defined a function is_valid() to detect if the address is valid. If any invalidation, terminate it.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Using a semaphore to ensure the synchronization between parent and children. When process_execute() semadown(). If complete, samaup(). So the parent could know if it is success/failure.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
1. Put the current thread to wait on 'same_wait' semaphore down.
2. C will remain in wait until parent exit.
If p before c without waiting, c can check the parent info.
If p after c without waiting,  p will free c until it finishes.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
It is faster and easiest for us to do it in this way.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantage:
1. List of fds, which is easy to operate files.
Disadvantage:
1. Cost memory space


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
